---

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  community.crypto.openssl_privatekey:
    path: "{{TMPDIR}}/{{cert_domains_list | first}}.key"
    force: "{{cert_overwrite}}"
    size: "{{private_key_size}}"
  register: cert_key

- name: Generate an OpenSSL Certificate Signing Request
  community.crypto.openssl_csr:
    path: "{{TMPDIR}}/{{cert_domains_list | first}}.csr"
    privatekey_path: "{{TMPDIR}}/{{cert_domains_list | first}}.key"
    key_usage:
      - digitalSignature
      - nonRepudiation
      - keyEncipherment
    extended_key_usage:
      - serverAuth
      - clientAuth
      - 1.3.6.1.4.1.311.10.3.4
    common_name: "{{ cert_domains_list | first }}"
    subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
    force: "{{cert_overwrite}}"
  register: cert_csr
  with_dict:
    dns_server: "{{ cert_domains_list }}"

- name: Generate an OpenSSL certificate
  community.crypto.x509_certificate:
    path: "{{TMPDIR}}/{{ cert_domains_list | first }}.crt"
    privatekey_path: "{{TMPDIR}}/{{cert_domains_list|first}}.key"
    csr_path: "{{TMPDIR}}/{{cert_domains_list|first}}.csr"
    ownca_path: "{{ca_crt.filename}}"
    ownca_privatekey_path: "{{ca_key.filename}}"
    provider: ownca # 'selfsigned' if this had been self-signed
    force: "{{cert_overwrite}}"
  register: cert_crt

- name: generate pkcs12 file
  community.crypto.openssl_pkcs12:
    action: export
    path: "{{TMPDIR}}/{{ cert_domains_list | first }}.p12"
    friendly_name: "{{ cert_domains_list | first }}"
    privatekey_path: "{{ cert_key.filename }}"
    certificate_path: "{{ cert_crt.filename }}"
    # was called 'ca_cerficates' before 2.8
    other_certificates: "{{ ca_crt.filename }}"
    force: "{{cert_overwrite}}"
    state: present
  register: cert_p12

- name: show cert
  community.crypto.x509_certificate_info:
    path: "{{cert_crt.filename}}"
  register: cert_result
- debug: 
    msg: >
      subject: {{cert_result.subject}}
      issuer: {{cert_result.issuer}}
      subject_alt_name: {{cert_result.subject_alt_name}}

- name: verify cert against CA using openssl
  command: openssl verify -CAfile {{ca_crt.filename}} {{cert_crt.filename}}
  register: cert_validate
- debug: msg="{{cert_validate.stdout}}"

